name: CI

on:
  push:
    branches: [ main, chore/cloud-ready-audit ]
  pull_request:
    branches: [ main ]

jobs:
  ci:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ['20']

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      # Use the more efficient caching strategy from integration.yml
      - name: Cache npm cache only
        # Avoid caching/restoring node_modules across platforms because
        # optional native binaries (rollup native) can be missing when
        # node_modules were created on a different OS. Cache only the npm
        # cache directory to speed installs while ensuring fresh platform
        # native modules are fetched on the runner.
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
          key: ${{ runner.os }}-npm-cache-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-cache-

      - name: Install deps (strict)
        run: npm ci --no-audit --no-fund

      - name: Install server dependencies
        run: npm ci --no-audit --no-fund --prefix server


      - name: Verify single OpenAI
        run: npm ls openai

      # Run the main lint script from root package.json
      - name: Lint
        run: npm run lint

      - name: Ensure native optional deps
        # Some optional native packages (rollup native bindings) may be missing
        # when restoring node_modules from a lockfile created on a different OS.
        # Remove both any restored node_modules and the root package-lock.json
        # on the runner, then run a fresh install so npm can fetch
        # platform-specific optional dependencies (e.g. @rollup/rollup-linux-x64-gnu).
        # NOTE: this is heavier (no lockfile) but required when optional native
        # binaries are not present for the runner platform.
        run: |
          rm -rf node_modules package-lock.json
          npm install --no-audit --no-fund

      - name: Build frontend
        run: npm run build

      - name: Run frontend tests
        run: npm run test:run --silent
        env:
          CI: true
          VITE_API_URL: http://localhost:3001

      # Run the 'test:ci' script from server/package.json
      - name: Run server tests
        run: npm run test:ci --prefix server --silent
        env:
          NODE_ENV: test
          CI: true
          SUPABASE_URL: https://test.supabase.co
          SUPABASE_SERVICE_ROLE_KEY: test-service-role-key
          DATABASE_URL: postgresql://test:test@localhost:5432/test
          JWT_SECRET: test-jwt-secret-key-for-testing-only
          OPENAI_API_KEY: sk-test-key-for-ci